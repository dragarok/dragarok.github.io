<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Braindumps on Alok&#39;s Blog</title>
    <link>https://dragarok.github.io/braindump/</link>
    <description>Recent content in Braindumps on Alok&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 May 2020 03:40:13 +0545</lastBuildDate>
    
	<atom:link href="https://dragarok.github.io/braindump/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Large Scale Network Embedding</title>
      <link>https://dragarok.github.io/braindump/2020/05/large-scale-network-embedding/</link>
      <pubDate>Sat, 02 May 2020 03:40:13 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/05/large-scale-network-embedding/</guid>
      <description>&amp;ndash;tags: Graph Embedding Techniques
LINE: Large scale Network Embedding &amp;ndash; Explicitly define two functions for 1st and 2nd order proximity. &amp;ndash; EMpirically,found that the 2nd order proximity performed better and improved accuracy. &amp;ndash; Goal: to decrease KL divergence between the input and the embedding distributions &amp;ndash; Since the algorithm has to define new functions for each increasing order of proximity, LINE doesn’t perform very well if the application needs an understanding of node community structure.</description>
    </item>
    
    <item>
      <title>8086</title>
      <link>https://dragarok.github.io/braindump/2020/05/8086/</link>
      <pubDate>Sat, 02 May 2020 01:01:54 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/05/8086/</guid>
      <description>one pass assembler: converts whole at one, jmp instruction references made after assembly two pass: converts in two steps : first generates a symbol table of names and labels used in programs and calculate their relative addresses, then converts the instructions into machine code in the next cycle of assembly, more efficient and easier than first
Linking:
 can link multiple obj files into one and forms exe file additional files that can be produced by the linker .</description>
    </item>
    
    <item>
      <title>KdeConnect I3</title>
      <link>https://dragarok.github.io/braindump/2020/05/kdeconnect-i3/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/05/kdeconnect-i3/</guid>
      <description>Firewall sudo ufw allow 1714:1764/udp sudo ufw allow 1714:1764/tcp
Installation pacman -S kdeconnect yay -S indicator-kdeconnect I3 settings exec --no-startup-id indicator-kdeconnect I3 additional If the above one is not working
exec --no-startup-id /usr/lib/kdeconnectd </description>
    </item>
    
    <item>
      <title>Songs</title>
      <link>https://dragarok.github.io/braindump/2020/04/songs/</link>
      <pubDate>Mon, 27 Apr 2020 11:04:41 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/songs/</guid>
      <description>Eurielle - Song of Durin &amp;ndash; Hobbit Part 1-3 Jade Bird - Ruins</description>
    </item>
    
    <item>
      <title>Emacs Hugo Blogging</title>
      <link>https://dragarok.github.io/braindump/2020/04/emacs-hugo-blogging/</link>
      <pubDate>Sun, 26 Apr 2020 04:53:19 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/emacs-hugo-blogging/</guid>
      <description>:ID: 0dacbf0d-550d-4db9-8e15-6ffcede1107c
Hugo blogging   Liked themes:
 Meme theme Harbor Cortex &amp;ndash;JethroKuan Hello friend ng rhazdon Beautiful Hugo   Blogging org mode Font    Font: Source Code Pro : big size : Looks amazing: Is in google fonts as well
//fonts.googleapis.com/css?family=Roboto+Slab:700,300,400|Source+Code+Pro:500 //maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css
    Normalize css : I don&amp;rsquo;t know what it does but looks pretty cool with all these stars on github.</description>
    </item>
    
    <item>
      <title>Beyond Higgs Boson</title>
      <link>https://dragarok.github.io/braindump/2020/04/beyond-higgs-boson/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/beyond-higgs-boson/</guid>
      <description>&amp;ndash; link: Beyond Higgs: The Wild Frontier of Particle Physics - YouTube - Brave
What are these people looking for?  Supersymmetry  Mathematical idea: Not still experimentally verified. Pencil standing on it&amp;rsquo;s tip Analogy: Though people found the Higgs out there, there is still no understanding of how the higgs is standing in the standard model. Physicists are looking for the support for the pencil if it is being held by a string or being held by hand.</description>
    </item>
    
    <item>
      <title>Google Dorks</title>
      <link>https://dragarok.github.io/braindump/2020/04/google-dorks/</link>
      <pubDate>Thu, 23 Apr 2020 16:31:35 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/google-dorks/</guid>
      <description>What Is Google Dorks? It is basically an advanced google search!
I have included four types of google dorks in this collection: Google dorks for SQL injection, Google dorks for Local File Inclusion, Google dorks For open CCTV cams and Google dorks for sensitive information.
Copy and paste the below google dorks on the search engine and have fun!
Google Dorks For SQL Injection:
•inurl:index.php?id=
•inurl:trainers.php?id=
•inurl:buy.php?category=
•inurl:article.php?ID=
•inurl:play_old.php?id=
•inurl:declaration_more.php?decl_id=</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://dragarok.github.io/braindump/2020/04/algorithms/</link>
      <pubDate>Tue, 21 Apr 2020 06:02:46 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/algorithms/</guid>
      <description>Algorithms Basic rules of complexity definition for removing terms:
 Multiplicative constants can be omitted: 14n2 becomes n2. n^a dominates n^b if a &amp;gt; b: for instance, n^2 dominates n. Any exponential dominates any polynomial: 3^n dominates n^5 (it even dominates 2^n). Likewise, any polynomial dominates any logarithm: n dominates (log n)^3. This also means, for example, that n^2 dominates n* log n.  Techniques to think of counter examples:</description>
    </item>
    
    <item>
      <title>Array Data Structures</title>
      <link>https://dragarok.github.io/braindump/2020/04/array-data-structures/</link>
      <pubDate>Tue, 21 Apr 2020 05:51:27 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/array-data-structures/</guid>
      <description>&amp;ndash;tags: Data Structures
Arrays:  Ordered collection of items with an index Index used to find the data Zero based index Fixed size - they are immutable dynamically add or remove elements in runtime data type is mostly specific the more constraints you put into data type ; the smaller efficient and practical use Flexibility comes at the cost of performance and memory  Multidimensional arrays:  Rows and columns: Array of arrays different dimensional arrays: collection of n-1 arrays is the n- dimensional arrays Multiple locations: Sets of days and time for the weather is a 3d array  Jagged arrays:  Not only rectangular arrays For days in months: there are relevant places where data is empty Internal arrays having different lengths new int[12][] gives us feasibility to write different one dimensional arrays in different situations  Resizable arrays:  all arrays that are defined firstly are immutable array list is different and instantiated as an object Objectives C gives the NSArray is immutable  NSMutableArray has mutability    Question:  Adding element at the top or the bottom Add the element at specific position Larger the array there is performance lag   Same functionality is used in a different way in every programming language pop is used mostly to remove the item in a array  Sorting in an array:  Internal structure and index remains the same Colossal amount of data if there are thousands of data to work with Different sorting algorithms on the basis of data size So, to choose different types and different mechanisms for sorting on the basis of how frequently the data needs to be sorted and how much data is to be sorted  Arrays of custom objects SORT:  Information to sort on which order Look into these objects and sort according to some data inside the object Bit of logic: making a comparator function to order or sort the objects  Searching arrays:  Sequential search to find the element Linear time algorithm Need to check every data just to find the data and predictable sequence to find data easily Cannot have a data structure that is equally good in all situations  Built in search behavior:  .</description>
    </item>
    
    <item>
      <title>Heap Data Structures</title>
      <link>https://dragarok.github.io/braindump/2020/04/heap-data-structures/</link>
      <pubDate>Tue, 21 Apr 2020 05:51:05 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/04/heap-data-structures/</guid>
      <description>&amp;ndash;tags: Data Structures
Heap: Used in sorting algorithms Binary tree not BST but binary tree Rules: Balanced always Left to right top to bottom Minheap or maxheap? Lowest or highest value at the top of heap First left child node is placed first Swapping of the min or max value management keeps a heap sorted Not fully sorted data structure: Min or max value is always at the top High priority is bubbled at the top which is its primary function rather than retrieving values</description>
    </item>
    
  </channel>
</rss>