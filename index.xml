<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alok&#39;s Blog</title>
    <link>https://dragarok.github.io/</link>
    <description>Recent content on Alok&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Oct 2020 00:00:00 +0545</lastBuildDate><atom:link href="https://dragarok.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R Programming 105- Unsupervised Learning</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-105-unsupervised-learning/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-105-unsupervised-learning/</guid>
      <description>K Means Clustering res &amp;lt;- kmeans(x, centers = num, nstart = num, iter.max = 20) res$cluster # gives the cluster number for each data point print(res) # prints cluster means, cluster, sum of squares by cluster and so on.   Arguments
 Centers is the number of clusters to make. Nstart is used to run algorithm multiple times to improve the odds of the best model. Iter.max is used to set the number of steps to do when creating each clusters.</description>
    </item>
    
    <item>
      <title>R Programming 105- Supervised Learning 1</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-105-supervised-learning-1/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-105-supervised-learning-1/</guid>
      <description>Aggregate by column aggregate(col_name ~ by_column_name, data = df_name, mean) We can use other functions instead of mean as well. The variable after tilde is what the aggregation is done with respect to. If by_column_name is continent, the above code will calculate the mean for all continents for given column: e.g. age or anything like that.
Nearest Neighbors library(class) knn(train = train_data, test = test_data, cl=vector_train_labels)   Confusion Matrix</description>
    </item>
    
    <item>
      <title>R Programming 105- Supervised Learning 2 Regression</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-105-supervised-learning-2-regression/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-105-supervised-learning-2-regression/</guid>
      <description>TODOGain Curve Writing formulas formula_obj &amp;lt;- var1 ~ var2 formula_obj &amp;lt;- var1 ~ var2 + var3 formula_obj &amp;lt;- as.formula(&amp;#34;var1 ~ var2&amp;#34;) Getting information about the model print(model_var) summary(model_var) broom::glance(model_var) sigr:wrapFTest(model_var)  print shows the basic formula used and the coefficients for the model. summary shows the formula, coefficients, residuals as well as probabilistic statistics such as R^2 value and so on. glance shows the whole data from summary in the form of nice dataframe with columns such as df.</description>
    </item>
    
    <item>
      <title>R Programming 104- Correlation and Regression</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-104-correlation-and-regression/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-104-correlation-and-regression/</guid>
      <description>Backlinks  Data Scientist with R  </description>
    </item>
    
    <item>
      <title>R Programming 104- Correlation and Regression</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-104-correlation-and-regression/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-104-correlation-and-regression/</guid>
      <description>Getting the coefficients ID: 4e16c77d-2e7f-418a-8e03-ce7200ca9d89  coef(model_var) summary(model_var) fitted.values(mod_var) # each observation fitted residuals(mod_var) \[e + \hat{y} = y \] The sum of residual and fitted value is equal to the original value.
Coefficient of determination \[R^{2}=1-\frac{S S E}{S S T}=1-\frac{\operatorname{Var}(e)}{\operatorname{Var}(y)}\] This helps to analyze between different models how good the fit is. It compares the model&amp;rsquo;s utility with respect o null model. \[ y = \hat{y} \] which always outputs the mean of the overall data whatever the input is.</description>
    </item>
    
    <item>
      <title>R Programming 103- Exploratory Data Analysis</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-103-exploratory-data-analysis/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-103-exploratory-data-analysis/</guid>
      <description>Practice Course   Dropping levels from categorical dataset
df %&amp;gt;% filter(col_name != &amp;#34;certain_level&amp;#34;) %&amp;gt;% droplevels(df$col_name)     Counts vs Proportions
prop.table(table_obj) prop.table(table_obj, number) # used to condition on some factor prop.table(table_obj, 1) # condition on rows prop.table(table_obj, 2) # condition on columns With this method, we can have marginal distributions for ourselves.
    Numerical Data
Note on the variability of the distribution and mean of the distribution when looking at numerical data representations.</description>
    </item>
    
    <item>
      <title>R Programming 102- Dates and Times</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-102-dates-and-times/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-102-dates-and-times/</guid>
      <description>Inbuilt Functionalities Breaks on date axes in years:
scale_x_date(date_breaks = &amp;#34;5 years&amp;#34;, date_labels = &amp;#34;%Y&amp;#34;) Types of Datetimes
 POSIXct : seconds since 1970-01-01 POSIXlt : list with named components  as.POSIXct(&amp;#34;date-string&amp;#34;) UTC as Timezone in Datetime object: 2010-01-01 00:00:00Z will mean a UTC timezone object and will be parsed accordingly. Else the time is local. You can change the timezone in POSIXct object though.
as.POSIXct(&amp;#34;date-string&amp;#34;, tz= &amp;#34;UTC&amp;#34;) This line preserves the datetime in UTC.</description>
    </item>
    
    <item>
      <title>R Programming 102- Functions in R</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-102-functions-in-r/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-102-functions-in-r/</guid>
      <description>List the arguments to a function args(function_name) Categorical defaults function(x, y, z, cat_arg = c(&amp;#34;arg1&amp;#34;, &amp;#34;arg2&amp;#34;, &amp;#34;arg3&amp;#34;)) # inside function body cat_arg &amp;lt;- match.arg(cat_arg) Passing arguments between functions function(x, ...) { some_other_function(...) } In cases where some_other_function in our case takes many arguments that we want to specify as the user sends them, we can use ellipsis like this to get around with it.
Checking for values type manually if(! is.</description>
    </item>
    
    <item>
      <title>R Programming 102- Cleaning data</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-102-cleaning-data/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-102-cleaning-data/</guid>
      <description>library(assertive) assert_is_numeric(df$col_name) assert_is_character(df$col_name) class(df$col_name) # check data types Similarly, we have more functions for more data type checks.
library(stringr) str_remove(df$tbl_name, &amp;#34;char_to_be_removed&amp;#34;) Assert values within a range given by lower and upper arguments.
assert_all_are_in_closed_range(df$tbl_name, lower = num, upper = num) Assert all dates are in the past
assert_all_are_in_past(tbl_name$col_name) as.Date(dateCol) # to convert to date type Uniqueness constraints for Full duplicates
duplicated(df) # finds full duplicates and returns logical values sum(duplicated(df)) # count of full duplicates Uniqueness constraints for partial duplicates</description>
    </item>
    
    <item>
      <title>R Programming 102- Importing Databases and URLs</title>
      <link>https://dragarok.github.io/braindump/2020/10/r-programming-102-importing-databases-and-urls/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0545</pubDate>
      
      <guid>https://dragarok.github.io/braindump/2020/10/r-programming-102-importing-databases-and-urls/</guid>
      <description>Databases Importing Library library(DBI) Creating Connection con &amp;lt;-dbConnect(RMySQL::MySQL(), dbname = &amp;#34;db_name&amp;#34;, host = &amp;#34;localhost&amp;#34;, port = port_num, user = &amp;#34;username&amp;#34;, password = &amp;#34;my_password&amp;#34;) This connection object is specific to MySQL database.
Importing data   Read Whole Tables
dbListTables(con) dbReadTable(con, &amp;#34;table_name&amp;#34;)     Read selected data from tables
dbGetQuery(con, &amp;#34;SELECT * FROM TABLE_NAME WHERE date &amp;gt; &amp;#39;2020-02-01&amp;#39;&amp;#34;) res &amp;lt;- dbSendQuery(con, &amp;#34;query string&amp;#34;) dbFetch(res) dbClearResult(res) The dbGetQuery first sends the query and fetches it.</description>
    </item>
    
  </channel>
</rss>
