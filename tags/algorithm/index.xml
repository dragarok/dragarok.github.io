<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on </title>
    <link>https://dragarok.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 May 2020 03:44:10 +0545</lastBuildDate>
    <atom:link href="https://dragarok.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms</title>
      <link>https://dragarok.github.io/braindump/2020/04/algorithms/</link>
      <pubDate>Tue, 21 Apr 2020 06:02:46 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/algorithms/</guid>
      <description>Algorithms Basic rules of complexity definition for removing terms:&#xA;Multiplicative constants can be omitted: 14n2 becomes n2. n^a dominates n^b if a &amp;gt; b: for instance, n^2 dominates n. Any exponential dominates any polynomial: 3^n dominates n^5 (it even dominates 2^n). Likewise, any polynomial dominates any logarithm: n dominates (log n)^3. This also means, for example, that n^2 dominates n* log n. Techniques to think of counter examples:&#xA;Think small Think exhaustively: All possibilities by adding to general cases Hunt for the weakness: understand the problem statement and try to find loopholes Go for a tie: Attacking greedy procedures Extreme examples: Searching for solution to problem needs you to know first the type of problem it falls into:</description>
    </item>
    <item>
      <title>Graph Algorithms</title>
      <link>https://dragarok.github.io/braindump/2020/04/graph-algorithms/</link>
      <pubDate>Sun, 19 Apr 2020 15:59:47 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/graph-algorithms/</guid>
      <description>Graph Algos:&#xA;Know when to use adjacency list vs adjacency matrices: mostly adjacency lists are used&#xA;Directed and undirected graphs: Undirected have vertex linked to both the nodes i.e. we need to insert edge for both nodes&#xA;Initialization of graph will set edge matrix to null, degree matrix to zero, number of vertices to zero.&#xA;Edgenode data structure is created which saves the node, weight of edge and the next edgenode reference.</description>
    </item>
    <item>
      <title>Graph Algorithms</title>
      <link>https://dragarok.github.io/ai/graph_algos/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://dragarok.github.io/ai/graph_algos/</guid>
      <description>Graph Algos:&#xA;Know when to use adjacency list vs adjacency matrices: mostly adjacency lists are used&#xA;Directed and undirected graphs: Undirected have vertex linked to both the nodes i.e. we need to insert edge for both nodes&#xA;Initialization of graph will set edge matrix to null, degree matrix to zero, number of vertices to zero.&#xA;Edgenode data structure is created which saves the node, weight of edge and the next edgenode reference.</description>
    </item>
  </channel>
</rss>
