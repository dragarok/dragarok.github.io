<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datastructure on </title>
    <link>https://dragarok.github.io/tags/datastructure/</link>
    <description>Recent content in Datastructure on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Sep 2020 19:50:49 +0545</lastBuildDate>
    <atom:link href="https://dragarok.github.io/tags/datastructure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structures</title>
      <link>https://dragarok.github.io/braindump/2020/09/data-structures/</link>
      <pubDate>Thu, 17 Sep 2020 19:50:49 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/09/data-structures/</guid>
      <description>&lt;h2 id=&#34;data-structures&#34;&gt;Data Structures:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Keep related info together to find the data in an efficent way&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Collections of information&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Haphazard is imaginary ; it is an intentional management of data&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Held in memory inside the running application&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Systematic arrangement of some values together&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiple repeating items as different transactions&lt;/li&gt;&#xA;&lt;li&gt;Use of the idea of tuple to generate a group for similar data&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;C styled struct:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;No behavior only data&lt;/li&gt;&#xA;&lt;li&gt;Simple creation&lt;/li&gt;&#xA;&lt;li&gt;Value types unlike objects which are passed as reference&lt;/li&gt;&#xA;&lt;li&gt;No features of oop&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;requirements-of-any-data-structures&#34;&gt;Requirements of any data structures:&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;How to find (can be a single or multiple items at once)&lt;/li&gt;&#xA;&lt;li&gt;How to insert (where to insert the data) [INSERT  OR PUSH]&lt;/li&gt;&#xA;&lt;li&gt;How to delete (from end or from top and how by copying into a new array or dynamic shuffling) [REMOVE OR POP]&lt;/li&gt;&#xA;&lt;li&gt;How to find (if it exists or where it exists)&lt;/li&gt;&#xA;&lt;li&gt;How to sort (sort in place or create new sorted version)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!--listend--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Staying conscious of the data, how much, how many the data is going to alter&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Arrays: Direct indexing, easy to create and use Weak: Sort, Search and insertion&lt;/li&gt;&#xA;&lt;li&gt;Linked list: Insertion and iteration is better; Weak: Direct search and sort&lt;/li&gt;&#xA;&lt;li&gt;Stacks and Queues: LIFO OR FIFO Weak: DIrect access, Searching and sorting&lt;/li&gt;&#xA;&lt;li&gt;Hash table: Speed of insertion and deletion, Access speed Weak: Retrieving in a sorted order, Search for a value&lt;/li&gt;&#xA;&lt;li&gt;Sets: Check exists(), Avoid duplicates&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;backlinks&#34;&gt;Backlinks&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../braindump/2020/04/array-data-structures/&#34;&gt;Array Data Structures&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../braindump/2020/04/stack-data-structures/&#34;&gt;Stack Data Structures&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../braindump/2020/04/heap-data-structures/&#34;&gt;Heap Data Structures&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../braindump/2020/04/list-data-structures/&#34;&gt;List Data Structures&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../../braindump/2020/04/hash-data-structures/&#34;&gt;Hash Data Structures&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
