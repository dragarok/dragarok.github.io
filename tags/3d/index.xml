<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3d on </title>
    <link>https://dragarok.github.io/tags/3d/</link>
    <description>Recent content in 3d on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Apr 2020 16:00:00 +0545</lastBuildDate>
    <atom:link href="https://dragarok.github.io/tags/3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3ddatarepresentation</title>
      <link>https://dragarok.github.io/braindump/2020/04/3ddatarepresentation/</link>
      <pubDate>Sun, 19 Apr 2020 16:00:00 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/3ddatarepresentation/</guid>
      <description>&lt;p&gt;3D data representations:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Point Cloud(PointNet):&#xA;&amp;ndash; More concretely, given points in a point cloud, the network needs to learn&#xA;unique features that are invariant to the permutations of this input data,&#xA;since the ordering of points fed into a network doesn&amp;rsquo;t impact the underlying geometry.&#xA;&amp;ndash; network should be robust to transformations of the point cloud â€”&#xA;rotations, translations and scaling should not impact prediction.&#xA;&amp;ndash; To ensure invariance across input ordering, the key insight behind PointNet is using&#xA;a simple symmetric function that produces a consistent output for any ordering of the input&#xA;(examples in this class of functions include addition and multiplication)&#xA;&amp;ndash; So, we need to have a symmetric function &amp;lsquo;f&amp;rsquo; that converts input points into k-dim vector&#xA;f = gamma * g(h(x1),&amp;hellip;. h(xn))&#xA;where h is hidden MLP conversion of input points&#xA;g is symmetric function too&#xA;The max-pooling operations serves as the symmetric function &amp;lsquo;g&amp;rsquo;,&#xA;aggregating learned features into a global descriptor for the point cloud.&#xA;gamma is also a MLP which predicts the output&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
