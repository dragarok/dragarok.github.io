<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on </title>
    <link>https://dragarok.github.io/tags/graph/</link>
    <description>Recent content in Graph on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 May 2020 03:44:39 +0545</lastBuildDate>
    <atom:link href="https://dragarok.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Graph Neural Networks</title>
      <link>https://dragarok.github.io/braindump/2020/04/graph-neural-networks/</link>
      <pubDate>Sun, 19 Apr 2020 19:24:20 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/graph-neural-networks/</guid>
      <description>&lt;h2 id=&#34;graph-neural-net-intro&#34;&gt;Graph Neural Net Intro&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ndash; Information about the non euclidean space incorporated&#xA;&amp;ndash; 2D conversion of image as input vs 3D image as input&#xA;&amp;ndash; Ideas about no connectivity in cases of pixels&#xA;&amp;ndash; Atoms, molecules, SMILE notation, what it leaves behind is the actual structural information&#xA;&amp;ndash; Nodes, edges, labels, attributes, rule(function that gives another node from one node)&#xA;&amp;ndash; Static and dynamic graphs will have different ways&#xA;&amp;ndash; Graph embedding: process of representing graphs vectorically with lower dimensions with as&#xA;low information loss as possible&#xA;&amp;ndash; Adjacency Matrix are mostly used.&#xA;&amp;ndash; Laplcian matrix = Degree - adjacency matrix&#xA;&amp;ndash; Generally all three types of matrices are used in many of the approaches.&#xA;&amp;ndash; Degree Matrix are diagonal matrices with the value of degree along the diagonal.&#xA;&amp;ndash; In case of undirected graphs, the no of connections is the degree.&#xA;&amp;ndash; In case of directed graphs, degree is either  out degree or in degree&#xA;&amp;ndash; In case of weighted graphs, it is the sum of weights on all nodes&#xA;&amp;ndash; Node level, Sub graph level embeddings&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graph Neural Nets</title>
      <link>https://dragarok.github.io/braindump/2020/04/graph-neural-nets/</link>
      <pubDate>Sun, 19 Apr 2020 16:00:36 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/graph-neural-nets/</guid>
      <description>&lt;p&gt;&amp;ndash; Information about the non euclidean space incorporated&#xA;&amp;ndash; 2D conversion of image as input vs 3D image as input&#xA;&amp;ndash; Ideas about no connectivity in cases of pixels&#xA;&amp;ndash; Atoms, molecules, SMILE notation, what it leaves behind is the actual structural information&#xA;&amp;ndash; Nodes, edges, labels, attributes, rule(function that gives another node from one node)&#xA;&amp;ndash; Static and dynamic graphs will have different ways&#xA;&amp;ndash; Graph embedding: process of representing graphs vectorically with lower dimensions with as&#xA;low information loss as possible&#xA;&amp;ndash; Adjacency Matrix are mostly used.&#xA;&amp;ndash; Laplcian matrix = Degree - adjacency matrix&#xA;&amp;ndash; Generally all three types of matrices are used in many of the approaches.&#xA;&amp;ndash; Degree Matrix are diagonal matrices with the value of degree along the diagonal.&#xA;&amp;ndash; In case of undirected graphs, the no of connections is the degree.&#xA;&amp;ndash; In case of directed graphs, degree is either  out degree or in degree&#xA;&amp;ndash; In case of weighted graphs, it is the sum of weights on all nodes&#xA;&amp;ndash; Node level, Sub graph level embeddings&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graph Algorithms</title>
      <link>https://dragarok.github.io/braindump/2020/04/graph-algorithms/</link>
      <pubDate>Sun, 19 Apr 2020 15:59:47 +0545</pubDate>
      <guid>https://dragarok.github.io/braindump/2020/04/graph-algorithms/</guid>
      <description>&lt;p&gt;Graph Algos:&lt;/p&gt;&#xA;&lt;p&gt;Know when to use adjacency list vs adjacency matrices: mostly adjacency lists are used&lt;/p&gt;&#xA;&lt;p&gt;Directed and undirected graphs: Undirected have vertex linked to both the nodes i.e. we need to insert edge for both nodes&lt;/p&gt;&#xA;&lt;p&gt;Initialization of graph will set edge matrix to null, degree matrix to zero, number of vertices to zero.&lt;/p&gt;&#xA;&lt;p&gt;Edgenode data structure is created which saves the node, weight of edge  and the next edgenode reference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graph Algorithms</title>
      <link>https://dragarok.github.io/ai/graph_algos/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://dragarok.github.io/ai/graph_algos/</guid>
      <description>&lt;p&gt;Graph Algos:&lt;/p&gt;&#xA;&lt;p&gt;Know when to use adjacency list vs adjacency matrices: mostly adjacency lists are used&lt;/p&gt;&#xA;&lt;p&gt;Directed and undirected graphs: Undirected have vertex linked to both the nodes i.e. we need to insert edge for both nodes&lt;/p&gt;&#xA;&lt;p&gt;Initialization of graph will set edge matrix to null, degree matrix to zero, number of vertices to zero.&lt;/p&gt;&#xA;&lt;p&gt;Edgenode data structure is created which saves the node, weight of edge  and the next edgenode reference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graph Neural Networks</title>
      <link>https://dragarok.github.io/ai/graph-neural-networks/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://dragarok.github.io/ai/graph-neural-networks/</guid>
      <description>&lt;h2 id=&#34;graph-neural-net-intro&#34;&gt;Graph Neural Net Intro&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ndash; Information about the non euclidean space incorporated&#xA;&amp;ndash; 2D conversion of image as input vs 3D image as input&#xA;&amp;ndash; Ideas about no connectivity in cases of pixels&#xA;&amp;ndash; Atoms, molecules, SMILE notation, what it leaves behind is the actual structural information&#xA;&amp;ndash; Nodes, edges, labels, attributes, rule(function that gives another node from one node)&#xA;&amp;ndash; Static and dynamic graphs will have different ways&#xA;&amp;ndash; Graph embedding: process of representing graphs vectorically with lower dimensions with as&#xA;low information loss as possible&#xA;&amp;ndash; Adjacency Matrix are mostly used.&#xA;&amp;ndash; Laplcian matrix = Degree - adjacency matrix&#xA;&amp;ndash; Generally all three types of matrices are used in many of the approaches.&#xA;&amp;ndash; Degree Matrix are diagonal matrices with the value of degree along the diagonal.&#xA;&amp;ndash; In case of undirected graphs, the no of connections is the degree.&#xA;&amp;ndash; In case of directed graphs, degree is either  out degree or in degree&#xA;&amp;ndash; In case of weighted graphs, it is the sum of weights on all nodes&#xA;&amp;ndash; Node level, Sub graph level embeddings&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
